version: '3.8'
services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "123"
      POSTGRES_DB: dss
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend_net
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc -w 2 localhost 2181 | grep imok" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      - zookeeper
#      zookeeper:
#        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_START_TIMEOUT: 120
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend_net

  web-backend:
    build:
      context: .
      dockerfile: web-service/Dockerfile
    ports:
      - "8081:8081"
    environment:
      SPRING_APPLICATION_NAME: web-backend
      POSTGRES_CONTAINER_NAME: postgres
      POSTGRES_PORT: "5432"
      POSTGRES_DB: dss
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "123"
      GENERATOR_SERVICE_URL: http://generator-service:8082
      EXPORT_SERVICE_URL: http://export-lb:8083
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - postgres
      - kafka
      - logstash
    networks:
      - backend_net

  generator-service:
    build:
      context: .
      dockerfile: generator-service/Dockerfile
    ports:
      - "8082:8082"
    environment:
      SPRING_APPLICATION_NAME: generator-service
      POSTGRES_CONTAINER_NAME: postgres
      POSTGRES_PORT: "5432"
      POSTGRES_DB: dss
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "123"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - postgres
      - logstash
    networks:
      - backend_net

  export-service:
    build:
      context: .
      dockerfile: export-service/Dockerfile
#    ports:
#      - "8083:8083"
    environment:
      SPRING_APPLICATION_NAME: export-service
      POSTGRES_CONTAINER_NAME: postgres
      POSTGRES_PORT: "5432"
      POSTGRES_DB: dss
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "123"
    depends_on:
      - postgres
      - kafka
      - logstash
    networks:
      - backend_net
  export-lb:
    image: nginx:latest
    container_name: export-lb
    ports:
      - "8083:8083"
    volumes:
      - ./nginx-export.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - export-service
    networks:
      - backend_net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    container_name: elasticsearch
    environment:
      - node.name=es01
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - backend_net
  logstash:
    image: docker.elastic.co/logstash/logstash:8.7.0
    container_name: logstash
    volumes:
      - ./logstash/config:/usr/share/logstash/config
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5000:5000"
    depends_on:
      - elasticsearch
    networks:
      - backend_net

  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.0
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - backend_net

volumes:
  postgres_data:
  esdata:
    driver: local

networks:
  backend_net:
    name: backend_net
    driver: bridge